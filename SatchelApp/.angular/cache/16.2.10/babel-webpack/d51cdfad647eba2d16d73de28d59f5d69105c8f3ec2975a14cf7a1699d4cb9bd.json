{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./authorization.service\";\nexport class ConfigService {\n  constructor(authorizationService) {\n    this.authorizationService = authorizationService;\n    this.PATHS = {\n      inactiveStar: '../../../../../assets/images/icons/favourites.svg',\n      activeStar: '../../../../../assets/images/icons/activeFavourite.svg',\n      defaultUserPhoto: '../../../assets/images/defaultUserImage.avif',\n      defaultProductImage: '../../../assets/images/defaultProductImage.jpg' //лучше скачать, долго грузится иногда\n    };\n\n    this.mainCarouselImages = ['../../../assets/images/mainCarouselImage1.webp', '../../../assets/images/mainCarouselImage2.jpg', '../../../assets/images/mainCarouselImage3.jpg'];\n  }\n  getFormattedPrice(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \") + ' ₽';\n  }\n  static #_ = this.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i1.AuthorizationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ConfigService","constructor","authorizationService","PATHS","inactiveStar","activeStar","defaultUserPhoto","defaultProductImage","mainCarouselImages","getFormattedPrice","num","toString","replace","_","i0","ɵɵinject","i1","AuthorizationService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Повелитель\\Documents\\GitHub\\Satchel\\SatchelApp\\src\\app\\core\\services\\config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AuthorizationService } from './authorization.service';\r\n\r\nexport interface Brand {\r\n  brandTypeId: number;\r\n  name: string;\r\n}\r\n\r\nexport interface ProductType {\r\n  productTypeId: number;\r\n  name: string;\r\n}\r\n\r\nexport interface SizeType {\r\n  sizeTypeId: number,\r\n  name: string\r\n}\r\n\r\nexport interface UserDto {\r\n  userId: number,\r\n  email: string,\r\n  userTypeName: string\r\n}\r\n\r\nexport interface ProductDto {\r\n  name: string,\r\n  description: string,\r\n  productTypeId: number,\r\n  price: number,\r\n  brandTypeId: number,\r\n  genderTypeId: number,\r\n  userId: number,\r\n  images: string[],\r\n  sizeTypeIds: number[],\r\n}\r\n\r\nexport interface UserPageData{\r\n  firstName: string;\r\n  middleName: string;\r\n  lastName: string;\r\n  email: string;\r\n  dateOfBirth: Date;\r\n  userPhotoSrc: string;\r\n  userType: string;\r\n  // можно будет дописать - отзывы\r\n}\r\n\r\nexport interface Step {\r\n  title: string;\r\n  fields: {\r\n    name: string;\r\n    type: string;\r\n  }[] \r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class ConfigService {\r\n\r\n  constructor(private authorizationService: AuthorizationService) { }\r\n\r\n  readonly PATHS = {\r\n    inactiveStar: '../../../../../assets/images/icons/favourites.svg',\r\n    activeStar: '../../../../../assets/images/icons/activeFavourite.svg',\r\n    defaultUserPhoto: '../../../assets/images/defaultUserImage.avif',\r\n    defaultProductImage: '../../../assets/images/defaultProductImage.jpg' //лучше скачать, долго грузится иногда\r\n  };\r\n\r\n  readonly mainCarouselImages = [\r\n    '../../../assets/images/mainCarouselImage1.webp',\r\n    '../../../assets/images/mainCarouselImage2.jpg',\r\n    '../../../assets/images/mainCarouselImage3.jpg'\r\n  ]\r\n\r\n  getFormattedPrice(num: number) {\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \") + ' ₽';\r\n  }\r\n}\r\n\r\n\r\n\r\n// 1)Пути к ресурсам: Пути к изображениям, такие как inactiveStar и activeStar, выглядят очень длинными и сложными. \r\n// Если возможно, рассмотрите возможность перемещения этих ресурсов в более доступное место, чтобы упростить пути.\r\n\r\n// 2)URL изображений: URL-ы изображений, такие как defaultProductImage и mainCarouselImages, указывают на внешние ресурсы. \r\n// Это может привести к проблемам с производительностью или доступностью, если эти ресурсы станут недоступными или изменятся. \r\n// Если возможно, рассмотрите возможность хранения этих изображений локально в вашем приложении.\r\n\r\n// 3)Интерфейсы: Интерфейсы Brand и ProductType объявлены в этом файле. \r\n// Если они используются в других частях вашего приложения, \r\n// вы можете рассмотреть возможность перемещения их в отдельный файл или файлы для лучшей организации и повторного использования.\r\n\r\n// 4)Метод getFormattedPrice: Этот метод добавляет знак рубля (₽) к отформатированной строке. \r\n// Если ваше приложение будет использоваться в разных странах с разной валютой, вы можете рассмотреть возможность сделать этот метод более гибким, \r\n// позволяя передавать символ валюты в качестве параметра.\r\n"],"mappings":";;AA2DA,OAAM,MAAOA,aAAa;EAExBC,YAAoBC,oBAA0C;IAA1C,KAAAA,oBAAoB,GAApBA,oBAAoB;IAE/B,KAAAC,KAAK,GAAG;MACfC,YAAY,EAAE,mDAAmD;MACjEC,UAAU,EAAE,wDAAwD;MACpEC,gBAAgB,EAAE,8CAA8C;MAChEC,mBAAmB,EAAE,gDAAgD,CAAC;KACvE;;IAEQ,KAAAC,kBAAkB,GAAG,CAC5B,gDAAgD,EAChD,+CAA+C,EAC/C,+CAA+C,CAChD;EAbiE;EAelEC,iBAAiBA,CAACC,GAAW;IAC3B,OAAOA,GAAG,CAACC,QAAQ,EAAE,CAACC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC,GAAG,IAAI;EACpE;EAAC,QAAAC,CAAA,G;qBAnBUb,aAAa,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,oBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAblB,aAAa;IAAAmB,OAAA,EAAbnB,aAAa,CAAAoB,IAAA;IAAAC,UAAA,EAHZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}