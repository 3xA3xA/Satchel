{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nexport let AuthorizationService = class AuthorizationService {\n  constructor(http, userService) {\n    this.http = http;\n    this.userService = userService;\n    this.apiUrl = `${environment.apiUrl}/User`;\n    this.stepChange = new Subject();\n    this.currentStep = 0;\n    this.isRegistrationOpen = false;\n    // полная залупа\n    this.steps = [{\n      title: 'Вход в аккаунт',\n      fields: [{\n        name: 'email',\n        type: 'email'\n      }, {\n        name: 'password',\n        type: 'password'\n      }]\n    }, {\n      title: 'Регистрация',\n      fields: [{\n        name: 'email',\n        type: 'email'\n      }, {\n        name: 'password',\n        type: 'password'\n      }]\n    }];\n  }\n  get step() {\n    return this.steps[this.currentStep];\n  }\n  sendLoginRequestToBackend(email, password) {\n    this.closeAuthWindow();\n    const user = {\n      email: email,\n      password: password\n    };\n    return this.http.post(this.apiUrl + '/LoginUser', user);\n  }\n  sendRegistrationRequestToBackend(email, password, userTypeName) {\n    this.closeAuthWindow();\n    const user = {\n      email: email,\n      password: password,\n      userTypeName: userTypeName\n    };\n    console.log(user);\n    return this.http.post(this.apiUrl + '/CreateUser', user);\n  }\n  resetSteps() {\n    this.currentStep = 0;\n    this.stepChange.next(this.currentStep);\n  }\n  goToRegistration() {\n    this.currentStep = 1;\n    this.stepChange.next(this.currentStep);\n  }\n  setAuthWindowStatus() {\n    this.isRegistrationOpen = true;\n  }\n  closeAuthWindow() {\n    this.resetSteps();\n    this.isRegistrationOpen = false;\n  }\n};\nAuthorizationService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthorizationService);","map":{"version":3,"names":["Injectable","Subject","environment","AuthorizationService","constructor","http","userService","apiUrl","stepChange","currentStep","isRegistrationOpen","steps","title","fields","name","type","step","sendLoginRequestToBackend","email","password","closeAuthWindow","user","post","sendRegistrationRequestToBackend","userTypeName","console","log","resetSteps","next","goToRegistration","setAuthWindowStatus","__decorate","providedIn"],"sources":["C:\\Satchel\\SatchelApp\\src\\app\\core\\services\\authorization.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject, Observable, of} from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { IUserDto } from './user.service';\r\n\r\nexport interface Step {\r\n  title: string;\r\n  fields: {\r\n    name: string;\r\n    type: string;\r\n  }[] \r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizationService {\r\n\r\n  constructor(private http: HttpClient, private userService: UserService) {}\r\n\r\n  private apiUrl: string = `${environment.apiUrl}/User`;\r\n\r\n  stepChange = new Subject();\r\n  currentStep = 0;\r\n  isRegistrationOpen : boolean = false;\r\n\r\n  // полная залупа\r\n  steps: Step[] = [\r\n    {\r\n      title: 'Вход в аккаунт',\r\n      fields: [\r\n        {name: 'email', type: 'email'},\r\n        {name: 'password', type: 'password'} \r\n      ]\r\n    },\r\n    {\r\n      title: 'Регистрация',\r\n      fields: [\r\n        {name: 'email', type: 'email'},\r\n        {name: 'password', type: 'password'},\r\n      ]\r\n    } \r\n  ]\r\n\r\n  get step() {\r\n    return this.steps[this.currentStep]; \r\n  }\r\n\r\n  sendLoginRequestToBackend(email: string, password: string): Observable<IUserDto> {\r\n    this.closeAuthWindow();\r\n    const user = {\r\n      email: email,\r\n      password: password\r\n    };\r\n    return this.http.post<IUserDto>(this.apiUrl + '/LoginUser', user);   \r\n  }\r\n\r\n  sendRegistrationRequestToBackend(email : string, password : string, userTypeName : string) : Observable<IUserDto> {\r\n    this.closeAuthWindow();\r\n    const user = {\r\n      email: email,\r\n      password: password,\r\n      userTypeName: userTypeName\r\n    };\r\n    console.log(user)\r\n    return this.http.post<IUserDto>(this.apiUrl + '/CreateUser', user);\r\n  }\r\n\r\n  resetSteps() {\r\n    this.currentStep = 0; \r\n    this.stepChange.next(this.currentStep); \r\n  }  \r\n\r\n  goToRegistration(){\r\n    this.currentStep = 1; \r\n    this.stepChange.next(this.currentStep); \r\n  }\r\n\r\n  setAuthWindowStatus() : void {\r\n    this.isRegistrationOpen = true;\r\n  }\r\n\r\n  closeAuthWindow() : void{\r\n    this.resetSteps();\r\n    this.isRegistrationOpen = false;\r\n  }\r\n}"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,OAAO,QAAuB,MAAM;AAE7C,SAASC,WAAW,QAAQ,8BAA8B;AAcnD,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAE/BC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAEjD,KAAAC,MAAM,GAAW,GAAGL,WAAW,CAACK,MAAM,OAAO;IAErD,KAAAC,UAAU,GAAG,IAAIP,OAAO,EAAE;IAC1B,KAAAQ,WAAW,GAAG,CAAC;IACf,KAAAC,kBAAkB,GAAa,KAAK;IAEpC;IACA,KAAAC,KAAK,GAAW,CACd;MACEC,KAAK,EAAE,gBAAgB;MACvBC,MAAM,EAAE,CACN;QAACC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC9B;QAACD,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAU,CAAC;KAEvC,EACD;MACEH,KAAK,EAAE,aAAa;MACpBC,MAAM,EAAE,CACN;QAACC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC9B;QAACD,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAU,CAAC;KAEvC,CACF;EAxBwE;EA0BzE,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACL,KAAK,CAAC,IAAI,CAACF,WAAW,CAAC;EACrC;EAEAQ,yBAAyBA,CAACC,KAAa,EAAEC,QAAgB;IACvD,IAAI,CAACC,eAAe,EAAE;IACtB,MAAMC,IAAI,GAAG;MACXH,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;KACX;IACD,OAAO,IAAI,CAACd,IAAI,CAACiB,IAAI,CAAW,IAAI,CAACf,MAAM,GAAG,YAAY,EAAEc,IAAI,CAAC;EACnE;EAEAE,gCAAgCA,CAACL,KAAc,EAAEC,QAAiB,EAAEK,YAAqB;IACvF,IAAI,CAACJ,eAAe,EAAE;IACtB,MAAMC,IAAI,GAAG;MACXH,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBK,YAAY,EAAEA;KACf;IACDC,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;IACjB,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAW,IAAI,CAACf,MAAM,GAAG,aAAa,EAAEc,IAAI,CAAC;EACpE;EAEAM,UAAUA,CAAA;IACR,IAAI,CAAClB,WAAW,GAAG,CAAC;IACpB,IAAI,CAACD,UAAU,CAACoB,IAAI,CAAC,IAAI,CAACnB,WAAW,CAAC;EACxC;EAEAoB,gBAAgBA,CAAA;IACd,IAAI,CAACpB,WAAW,GAAG,CAAC;IACpB,IAAI,CAACD,UAAU,CAACoB,IAAI,CAAC,IAAI,CAACnB,WAAW,CAAC;EACxC;EAEAqB,mBAAmBA,CAAA;IACjB,IAAI,CAACpB,kBAAkB,GAAG,IAAI;EAChC;EAEAU,eAAeA,CAAA;IACb,IAAI,CAACO,UAAU,EAAE;IACjB,IAAI,CAACjB,kBAAkB,GAAG,KAAK;EACjC;CACD;AAtEYP,oBAAoB,GAAA4B,UAAA,EAHhC/B,UAAU,CAAC;EACVgC,UAAU,EAAE;CACb,CAAC,C,EACW7B,oBAAoB,CAsEhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}