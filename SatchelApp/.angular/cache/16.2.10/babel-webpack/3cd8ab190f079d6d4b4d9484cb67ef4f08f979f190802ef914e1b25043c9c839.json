{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthorizationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7082/api/User';\n    this.stepChange = new Subject();\n    this.currentStep = 0;\n    this.isRegistrationOpen = false;\n    this.steps = [{\n      title: 'Введите email',\n      fields: [{\n        name: 'email',\n        type: 'email'\n      }]\n    }, {\n      title: 'Введите пароль',\n      fields: [{\n        name: 'password',\n        type: 'password'\n      }]\n    }, {\n      title: 'Регистрация',\n      fields: [{\n        name: 'email',\n        type: 'email'\n      }, {\n        name: 'password',\n        type: 'password'\n      }, {\n        name: 'name',\n        type: 'name'\n      }]\n    }];\n  }\n  get step() {\n    return this.steps[this.currentStep];\n  }\n  login(email, password) {\n    this.currentStep = 1;\n    this.stepChange.next(this.currentStep);\n    if (email && password) {\n      this.addNewUser(email, password).subscribe(response => {\n        console.log(response);\n        // Обработайте ответ от сервера\n      }, error => {\n        console.log(error);\n        // Обработайте ошибку\n      });\n    }\n  }\n\n  goToPreviousStep() {\n    this.currentStep--;\n  }\n  openAuthWindow() {\n    this.isRegistrationOpen = true;\n  }\n  closeAuthWindow() {\n    this.isRegistrationOpen = false;\n  }\n  addNewUser(email, password) {\n    const user = {\n      email: email,\n      password: password,\n      userType: 0\n    };\n    return this.http.get(this.apiUrl).pipe(map(response => response));\n  }\n  static #_ = this.ɵfac = function AuthorizationService_Factory(t) {\n    return new (t || AuthorizationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizationService,\n    factory: AuthorizationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","map","AuthorizationService","constructor","http","apiUrl","stepChange","currentStep","isRegistrationOpen","steps","title","fields","name","type","step","login","email","password","next","addNewUser","subscribe","response","console","log","error","goToPreviousStep","openAuthWindow","closeAuthWindow","user","userType","get","pipe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Satchel\\SatchelApp\\src\\app\\core\\services\\authorization.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport interface Step {\r\n  title: string;\r\n  fields: {\r\n    name: string;\r\n    type: string;\r\n  }[] \r\n}\r\n\r\ninterface IUser {\r\n  email : string;\r\n  password: string;\r\n  userType: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizationService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private apiUrl = 'https://localhost:7082/api/User';\r\n\r\n  stepChange = new Subject();\r\n  currentStep = 0;\r\n  isRegistrationOpen : boolean = false;\r\n\r\n  steps: Step[] = [\r\n    {\r\n      title: 'Введите email',\r\n      fields: [\r\n        {name: 'email', type: 'email'}  \r\n      ]\r\n    },\r\n    {\r\n      title: 'Введите пароль',\r\n      fields: [\r\n        {name: 'password', type: 'password'} \r\n      ]\r\n    },\r\n    {\r\n      title: 'Регистрация',\r\n      fields: [\r\n        {name: 'email', type: 'email'},\r\n        {name: 'password', type: 'password'},\r\n        {name: 'name', type: 'name'}\r\n      ]\r\n    } \r\n  ]\r\n\r\n  get step() {\r\n    return this.steps[this.currentStep]; \r\n  }\r\n\r\n  login(email?: string, password?: string) {\r\n    this.currentStep = 1; \r\n    this.stepChange.next(this.currentStep); \r\n\r\n    if (email && password)\r\n    {\r\n      this.addNewUser(email, password).subscribe(response => {\r\n        console.log(response);\r\n        // Обработайте ответ от сервера\r\n      }, error => {\r\n        console.log(error);\r\n        // Обработайте ошибку\r\n      });\r\n    }\r\n  }\r\n\r\n  goToPreviousStep() {\r\n    this.currentStep--;\r\n  }  \r\n\r\n  openAuthWindow() : void {\r\n    this.isRegistrationOpen = true;\r\n  }\r\n\r\n  closeAuthWindow() : void{\r\n    this.isRegistrationOpen = false;\r\n  }\r\n\r\n  addNewUser(email: string, password: string): Observable<IUser> {\r\n    const user = {\r\n      email: email,\r\n      password: password,\r\n      userType: 0\r\n    };\r\n    return this.http.get(this.apiUrl).pipe(\r\n      map(response => response as IUser)\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAoB,MAAM;AAC1C,SAASC,GAAG,QAAQ,gBAAgB;;;AAoBpC,OAAM,MAAOC,oBAAoB;EAE/BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAEhB,KAAAC,MAAM,GAAG,iCAAiC;IAElD,KAAAC,UAAU,GAAG,IAAIN,OAAO,EAAE;IAC1B,KAAAO,WAAW,GAAG,CAAC;IACf,KAAAC,kBAAkB,GAAa,KAAK;IAEpC,KAAAC,KAAK,GAAW,CACd;MACEC,KAAK,EAAE,eAAe;MACtBC,MAAM,EAAE,CACN;QAACC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAO,CAAC;KAEjC,EACD;MACEH,KAAK,EAAE,gBAAgB;MACvBC,MAAM,EAAE,CACN;QAACC,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAU,CAAC;KAEvC,EACD;MACEH,KAAK,EAAE,aAAa;MACpBC,MAAM,EAAE,CACN;QAACC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC9B;QAACD,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAU,CAAC,EACpC;QAACD,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAM,CAAC;KAE/B,CACF;EA7BsC;EA+BvC,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACL,KAAK,CAAC,IAAI,CAACF,WAAW,CAAC;EACrC;EAEAQ,KAAKA,CAACC,KAAc,EAAEC,QAAiB;IACrC,IAAI,CAACV,WAAW,GAAG,CAAC;IACpB,IAAI,CAACD,UAAU,CAACY,IAAI,CAAC,IAAI,CAACX,WAAW,CAAC;IAEtC,IAAIS,KAAK,IAAIC,QAAQ,EACrB;MACE,IAAI,CAACE,UAAU,CAACH,KAAK,EAAEC,QAAQ,CAAC,CAACG,SAAS,CAACC,QAAQ,IAAG;QACpDC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;QACrB;MACF,CAAC,EAAEG,KAAK,IAAG;QACTF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;QAClB;MACF,CAAC,CAAC;;EAEN;;EAEAC,gBAAgBA,CAAA;IACd,IAAI,CAAClB,WAAW,EAAE;EACpB;EAEAmB,cAAcA,CAAA;IACZ,IAAI,CAAClB,kBAAkB,GAAG,IAAI;EAChC;EAEAmB,eAAeA,CAAA;IACb,IAAI,CAACnB,kBAAkB,GAAG,KAAK;EACjC;EAEAW,UAAUA,CAACH,KAAa,EAAEC,QAAgB;IACxC,MAAMW,IAAI,GAAG;MACXZ,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBY,QAAQ,EAAE;KACX;IACD,OAAO,IAAI,CAACzB,IAAI,CAAC0B,GAAG,CAAC,IAAI,CAACzB,MAAM,CAAC,CAAC0B,IAAI,CACpC9B,GAAG,CAACoB,QAAQ,IAAIA,QAAiB,CAAC,CACnC;EACH;EAAC,QAAAW,CAAA,G;qBA1EU9B,oBAAoB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApBnC,oBAAoB;IAAAoC,OAAA,EAApBpC,oBAAoB,CAAAqC,IAAA;IAAAC,UAAA,EAFnB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}