{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthorizationService {\n  get step() {\n    return this.steps[this.currentStep];\n  }\n  login(email, password) {\n    this.currentStep = 1;\n    this.stepChange.next(this.currentStep);\n    if (email && password) {\n      return this.http.post(`${this.apiUrl}/upload`, formData);\n    }\n  }\n  prev() {\n    this.currentStep--;\n  }\n  constructor() {\n    this.apiUrl = 'https://localhost:7082/api/Product'; //URL API\n    this.stepChange = new Subject();\n    this.steps = [{\n      title: 'Введите email',\n      fields: [{\n        name: 'email',\n        type: 'email'\n      }]\n    }, {\n      title: 'Введите пароль',\n      fields: [{\n        name: 'password',\n        type: 'password'\n      }]\n    }, {\n      title: 'Регистрация',\n      fields: [{\n        name: 'email',\n        type: 'email'\n      }, {\n        name: 'password',\n        type: 'password'\n      }, {\n        name: 'name',\n        type: 'name'\n      }]\n    }];\n    this.currentStep = 0;\n    this.isRegistrationOpen = false;\n  }\n  openAuthWindow() {\n    this.isRegistrationOpen = true;\n  }\n  closeAuthWindow() {\n    this.isRegistrationOpen = false;\n  }\n  static #_ = this.ɵfac = function AuthorizationService_Factory(t) {\n    return new (t || AuthorizationService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizationService,\n    factory: AuthorizationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","AuthorizationService","step","steps","currentStep","login","email","password","stepChange","next","http","post","apiUrl","formData","prev","constructor","title","fields","name","type","isRegistrationOpen","openAuthWindow","closeAuthWindow","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Satchel\\SatchelApp\\src\\app\\core\\services\\authorization.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport interface Step {\r\n  title: string;\r\n  fields: {\r\n    name: string;\r\n    type: string;\r\n  }[] \r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizationService {\r\n\r\n  private apiUrl = 'https://localhost:7082/api/Product'; //URL API\r\n  stepChange = new Subject();\r\n\r\n  steps: Step[] = [\r\n    {\r\n      title: 'Введите email',\r\n      fields: [\r\n        {name: 'email', type: 'email'}  \r\n      ]\r\n    },\r\n    {\r\n      title: 'Введите пароль',\r\n      fields: [\r\n        {name: 'password', type: 'password'} \r\n      ]\r\n    },\r\n    {\r\n      title: 'Регистрация',\r\n      fields: [\r\n        {name: 'email', type: 'email'},\r\n        {name: 'password', type: 'password'},\r\n        {name: 'name', type: 'name'}\r\n      ]\r\n    } \r\n  ]\r\n\r\n  currentStep = 0;\r\n\r\n  get step() {\r\n    return this.steps[this.currentStep]; \r\n  }\r\n\r\n  login(email?: string, password?: string) {\r\n    this.currentStep = 1; \r\n    this.stepChange.next(this.currentStep); \r\n\r\n    if (email && password)\r\n    {\r\n      return this.http.post(`${this.apiUrl}/upload`, formData);\r\n    }\r\n  }\r\n\r\n  prev() {\r\n    this.currentStep--;\r\n  }\r\n\r\n  isRegistrationOpen : boolean = false;\r\n\r\n  constructor() { }\r\n\r\n  openAuthWindow() : void {\r\n    this.isRegistrationOpen = true;\r\n  }\r\n\r\n  closeAuthWindow() : void{\r\n    this.isRegistrationOpen = false;\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAc9B,OAAM,MAAOC,oBAAoB;EA8B/B,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,WAAW,CAAC;EACrC;EAEAC,KAAKA,CAACC,KAAc,EAAEC,QAAiB;IACrC,IAAI,CAACH,WAAW,GAAG,CAAC;IACpB,IAAI,CAACI,UAAU,CAACC,IAAI,CAAC,IAAI,CAACL,WAAW,CAAC;IAEtC,IAAIE,KAAK,IAAIC,QAAQ,EACrB;MACE,OAAO,IAAI,CAACG,IAAI,CAACC,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,SAAS,EAAEC,QAAQ,CAAC;;EAE5D;EAEAC,IAAIA,CAAA;IACF,IAAI,CAACV,WAAW,EAAE;EACpB;EAIAW,YAAA;IAhDQ,KAAAH,MAAM,GAAG,oCAAoC,CAAC,CAAC;IACvD,KAAAJ,UAAU,GAAG,IAAIR,OAAO,EAAE;IAE1B,KAAAG,KAAK,GAAW,CACd;MACEa,KAAK,EAAE,eAAe;MACtBC,MAAM,EAAE,CACN;QAACC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAO,CAAC;KAEjC,EACD;MACEH,KAAK,EAAE,gBAAgB;MACvBC,MAAM,EAAE,CACN;QAACC,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAU,CAAC;KAEvC,EACD;MACEH,KAAK,EAAE,aAAa;MACpBC,MAAM,EAAE,CACN;QAACC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC9B;QAACD,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAU,CAAC,EACpC;QAACD,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAM,CAAC;KAE/B,CACF;IAED,KAAAf,WAAW,GAAG,CAAC;IAoBf,KAAAgB,kBAAkB,GAAa,KAAK;EAEpB;EAEhBC,cAAcA,CAAA;IACZ,IAAI,CAACD,kBAAkB,GAAG,IAAI;EAChC;EAEAE,eAAeA,CAAA;IACb,IAAI,CAACF,kBAAkB,GAAG,KAAK;EACjC;EAAC,QAAAG,CAAA,G;qBA1DUtB,oBAAoB;EAAA;EAAA,QAAAuB,EAAA,G;WAApBvB,oBAAoB;IAAAwB,OAAA,EAApBxB,oBAAoB,CAAAyB,IAAA;IAAAC,UAAA,EAFnB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}