{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}`;\n    this.isAuthorized = false; // если true - пользователь зашел в аккаунт\n    this.userId = 0;\n  }\n  setAuthorizedStatus() {\n    this.isAuthorized = !this.isAuthorized;\n  }\n  get authorizedStatus() {\n    return this.isAuthorized;\n  }\n  getUserData() {\n    return this.http.get(`${this.apiUrl}/User/GetViewUserData/${this.userId}`);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","UserService","constructor","http","apiUrl","isAuthorized","userId","setAuthorizedStatus","authorizedStatus","getUserData","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Satchel\\SatchelApp\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport interface IUserDto {\r\n  userId: number,\r\n  email: string,\r\n  userTypeName: string\r\n}\r\n\r\nexport interface IUserPageData{\r\n  firstName: string;\r\n  middleName: string;\r\n  lastName: string;\r\n  email: string;\r\n  dateOfBirth: Date;\r\n  userPhotoSrc: string;\r\n  // можно будет дописать - отзывы\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class UserService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private apiUrl: string = `${environment.apiUrl}`;\r\n  isAuthorized = false; // если true - пользователь зашел в аккаунт\r\n  userId = 0;\r\n\r\n  setAuthorizedStatus(){\r\n    this.isAuthorized = !this.isAuthorized;\r\n  }\r\n\r\n  get authorizedStatus(){\r\n    return this.isAuthorized\r\n  }\r\n\r\n  getUserData(): Observable<IUserPageData> {\r\n    return this.http.get<IUserPageData>(`${this.apiUrl}/User/GetViewUserData/${this.userId}`);\r\n  } \r\n}\r\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA8B;;;AAuB1D,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAEhB,KAAAC,MAAM,GAAW,GAAGJ,WAAW,CAACI,MAAM,EAAE;IAChD,KAAAC,YAAY,GAAG,KAAK,CAAC,CAAC;IACtB,KAAAC,MAAM,GAAG,CAAC;EAJ8B;EAMxCC,mBAAmBA,CAAA;IACjB,IAAI,CAACF,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEA,IAAIG,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAACH,YAAY;EAC1B;EAEAI,WAAWA,CAAA;IACT,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAgB,GAAG,IAAI,CAACN,MAAM,yBAAyB,IAAI,CAACE,MAAM,EAAE,CAAC;EAC3F;EAAC,QAAAK,CAAA,G;qBAjBUV,WAAW,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXf,WAAW;IAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;IAAAC,UAAA,EAHV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}