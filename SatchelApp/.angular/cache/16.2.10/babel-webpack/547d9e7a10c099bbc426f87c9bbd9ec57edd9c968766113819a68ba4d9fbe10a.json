{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Product`;\n    this.productRecords = [];\n  }\n  getProductById(id) {\n    return this.http.get(`${this.apiUrl}/GetProductById/${id}`);\n  }\n  getAllProducts(productType) {\n    return this.http.get(`${this.apiUrl}/GetAllProducts/${productType}`);\n  }\n  // addNewProduct(productDto: ProductDto) {\n  //   return this.http.post(`${this.apiUrl}/AddProduct`, productDto);\n  // }\n  // addNewProduct(productDto: addProductBody) {\n  //   console.log(productDto)\n  //   return this.http.post(`${this.apiUrl}/AddProduct`, productDto);\n  // }\n  addNewProduct(productBody) {\n    const formData = new FormData();\n    Object.keys(productBody.addProductDto).forEach(key => {\n      formData.append(`addProductDto[${key}]`, productBody.addProductDto[key]);\n    });\n    if (productBody.images instanceof FormData) {\n      productBody.images.forEach((value, key) => {\n        if (value instanceof Blob) {\n          formData.append('images', value, key);\n        }\n      });\n    }\n    return this.http.post(`${this.apiUrl}/AddProduct`, formData);\n  }\n  getSellerProducts(userId) {\n    return this.http.get(`${this.apiUrl}/GetSellerProducts?userId=${userId}`);\n  }\n  deleteSellerProduct(productId) {\n    return this.http.delete(`${this.apiUrl}/${productId}`);\n  }\n  getFilteredProducts(filters, productType) {\n    const filteredParams = Object.fromEntries(Object.entries(filters).filter(([key, value]) => value != null));\n    return this.http.get(`${this.apiUrl}/GetAllProducts/${productType}/`, {\n      params: filteredParams\n    });\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","ProductService","constructor","http","apiUrl","productRecords","getProductById","id","get","getAllProducts","productType","addNewProduct","productBody","formData","FormData","Object","keys","addProductDto","forEach","key","append","images","value","Blob","post","getSellerProducts","userId","deleteSellerProduct","productId","delete","getFilteredProducts","filters","filteredParams","fromEntries","entries","filter","params","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Satchel\\SatchelApp\\src\\app\\core\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable} from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Product } from 'src/app/shared/components/routers/catalog/catalog.component';\r\nimport { AddProductBody, AddProductDto } from './config.service';\r\n\r\n// не могу его вынести\r\nexport interface Filters{\r\n  filterByMinPrice?: number, \r\n  filterByMaxPrice?: number, \r\n  filterByGender?: number, \r\n  filterByName?: string, \r\n  isFilterByDecreasePrice?: boolean, \r\n  isFilterByIncreasePrice?: boolean\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  private apiUrl: string = `${environment.apiUrl}/Product`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  productRecords : Product[] = []; \r\n\r\n  getProductById(id: number): Observable<Product> {\r\n    return this.http.get<Product>(`${this.apiUrl}/GetProductById/${id}`);\r\n  }\r\n\r\n  getAllProducts(productType : string): Observable<Product[]> {\r\n    return this.http.get<Product[]>(`${this.apiUrl}/GetAllProducts/${productType}`);\r\n  }\r\n\r\n  // addNewProduct(productDto: ProductDto) {\r\n  //   return this.http.post(`${this.apiUrl}/AddProduct`, productDto);\r\n  // }\r\n\r\n  // addNewProduct(productDto: addProductBody) {\r\n  //   console.log(productDto)\r\n  //   return this.http.post(`${this.apiUrl}/AddProduct`, productDto);\r\n  // }\r\n\r\n  addNewProduct(productBody: AddProductBody) {\r\n    const formData = new FormData();\r\n    Object.keys(productBody.addProductDto).forEach(key => {\r\n        formData.append(`addProductDto[${key}]`, productBody.addProductDto[key]);\r\n    });\r\n    if (productBody.images instanceof FormData) {\r\n        productBody.images.forEach((value, key) => {\r\n            if (value instanceof Blob) {\r\n                formData.append('images', value, key);\r\n            }\r\n        });\r\n    }\r\n    return this.http.post(`${this.apiUrl}/AddProduct`, formData);\r\n  }\r\n\r\n\r\n  getSellerProducts(userId: number): Observable<Product[]>{\r\n    return this.http.get<Product[]>(`${this.apiUrl}/GetSellerProducts?userId=${userId}`)\r\n  }\r\n  \r\n  \r\n  deleteSellerProduct(productId: number) {\r\n    return this.http.delete(`${this.apiUrl}/${productId}`)\r\n  }\r\n\r\n  getFilteredProducts(filters: Filters, productType: string): Observable<Product[]>{\r\n\r\n    const filteredParams = Object.fromEntries(\r\n      Object.entries(filters)\r\n        .filter(([key, value]) => value != null) \r\n    );\r\n\r\n    return this.http.get<Product[]>(`${this.apiUrl}/GetAllProducts/${productType}/`, {\r\n      params: filteredParams\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;AAiB1D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAW,GAAGJ,WAAW,CAACI,MAAM,UAAU;IAIxD,KAAAC,cAAc,GAAe,EAAE;EAFS;EAIxCC,cAAcA,CAACC,EAAU;IACvB,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,GAAG,IAAI,CAACJ,MAAM,mBAAmBG,EAAE,EAAE,CAAC;EACtE;EAEAE,cAAcA,CAACC,WAAoB;IACjC,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAY,GAAG,IAAI,CAACJ,MAAM,mBAAmBM,WAAW,EAAE,CAAC;EACjF;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEAC,aAAaA,CAACC,WAA2B;IACvC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BC,MAAM,CAACC,IAAI,CAACJ,WAAW,CAACK,aAAa,CAAC,CAACC,OAAO,CAACC,GAAG,IAAG;MACjDN,QAAQ,CAACO,MAAM,CAAC,iBAAiBD,GAAG,GAAG,EAAEP,WAAW,CAACK,aAAa,CAACE,GAAG,CAAC,CAAC;IAC5E,CAAC,CAAC;IACF,IAAIP,WAAW,CAACS,MAAM,YAAYP,QAAQ,EAAE;MACxCF,WAAW,CAACS,MAAM,CAACH,OAAO,CAAC,CAACI,KAAK,EAAEH,GAAG,KAAI;QACtC,IAAIG,KAAK,YAAYC,IAAI,EAAE;UACvBV,QAAQ,CAACO,MAAM,CAAC,QAAQ,EAAEE,KAAK,EAAEH,GAAG,CAAC;;MAE7C,CAAC,CAAC;;IAEN,OAAO,IAAI,CAAChB,IAAI,CAACqB,IAAI,CAAC,GAAG,IAAI,CAACpB,MAAM,aAAa,EAAES,QAAQ,CAAC;EAC9D;EAGAY,iBAAiBA,CAACC,MAAc;IAC9B,OAAO,IAAI,CAACvB,IAAI,CAACK,GAAG,CAAY,GAAG,IAAI,CAACJ,MAAM,6BAA6BsB,MAAM,EAAE,CAAC;EACtF;EAGAC,mBAAmBA,CAACC,SAAiB;IACnC,OAAO,IAAI,CAACzB,IAAI,CAAC0B,MAAM,CAAC,GAAG,IAAI,CAACzB,MAAM,IAAIwB,SAAS,EAAE,CAAC;EACxD;EAEAE,mBAAmBA,CAACC,OAAgB,EAAErB,WAAmB;IAEvD,MAAMsB,cAAc,GAAGjB,MAAM,CAACkB,WAAW,CACvClB,MAAM,CAACmB,OAAO,CAACH,OAAO,CAAC,CACpBI,MAAM,CAAC,CAAC,CAAChB,GAAG,EAAEG,KAAK,CAAC,KAAKA,KAAK,IAAI,IAAI,CAAC,CAC3C;IAED,OAAO,IAAI,CAACnB,IAAI,CAACK,GAAG,CAAY,GAAG,IAAI,CAACJ,MAAM,mBAAmBM,WAAW,GAAG,EAAE;MAC/E0B,MAAM,EAAEJ;KACT,CAAC;EACJ;EAAC,QAAAK,CAAA,G;qBA3DUpC,cAAc,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdzC,cAAc;IAAA0C,OAAA,EAAd1C,cAAc,CAAA2C,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}