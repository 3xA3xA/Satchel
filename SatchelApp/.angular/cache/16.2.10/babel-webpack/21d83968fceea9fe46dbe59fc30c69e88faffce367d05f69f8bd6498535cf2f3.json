{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { ElementRef, ViewChild } from '@angular/core';\nexport let CreateWindowComponent = class CreateWindowComponent {\n  constructor(createService, configeService, productService) {\n    this.createService = createService;\n    this.configeService = configeService;\n    this.productService = productService;\n    // массивы нужны для хранения списка фотографий продукта, брендов и типов продукта.\n    this.imageUrls = [this.configeService.PATHS.defaultProductImage];\n    this.productTypes = [];\n    this.brandTypes = [];\n    this.sizeByProductTypes = []; // Временно :))))\n    this.newProduct = {\n      name: '',\n      description: '',\n      productTypeId: 0,\n      price: 0,\n      brandTypeId: 0,\n      genderTypeId: 0\n    };\n    this.fileInput = new ElementRef(null);\n  }\n  ngOnInit() {\n    this.getBrandTypes();\n    this.getProductTypes();\n  }\n  onFileSelected(event) {\n    if (event.target.files && event.target.files.length) {\n      this.imageUrls = []; //обнулил предыдущие загруженные фотографии\n      for (let i = 0; i < event.target.files.length; i++) {\n        const file = event.target.files[i];\n        let reader = new FileReader();\n        reader.onload = event => {\n          this.imageUrls.push(event.target.result);\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  }\n  onBgClick(event) {\n    if (!event.target.classList.contains('create-form')) {\n      this.createService.setCreateWindowStatus();\n    }\n  }\n  addNewProduct() {\n    this.productService.addNewProduct(this.newProduct, this.imageUrls); //.subscribe\n    //   (data => {\n    //     console.log(data);\n    //   }, error => {\n    //     console.error(error);\n    //   });\n  }\n\n  getBrandTypes() {\n    this.createService.getBrandTypes().subscribe(data => {\n      this.brandTypes = data;\n      console.log(data);\n    }, error => {\n      console.error('Error fetching products', error);\n    });\n  }\n  getProductTypes() {\n    this.createService.getProductTypes().subscribe(data => {\n      this.productTypes = data;\n    }, error => {\n      console.error('Error fetching products', error);\n    });\n  }\n};\n__decorate([Input()], CreateWindowComponent.prototype, \"newProduct\", void 0);\n__decorate([ViewChild('fileInput')], CreateWindowComponent.prototype, \"fileInput\", void 0);\nCreateWindowComponent = __decorate([Component({\n  selector: 'app-create-window',\n  templateUrl: './create-window.component.html',\n  styleUrls: ['./create-window.component.css']\n})], CreateWindowComponent);","map":{"version":3,"names":["Component","Input","ElementRef","ViewChild","CreateWindowComponent","constructor","createService","configeService","productService","imageUrls","PATHS","defaultProductImage","productTypes","brandTypes","sizeByProductTypes","newProduct","name","description","productTypeId","price","brandTypeId","genderTypeId","fileInput","ngOnInit","getBrandTypes","getProductTypes","onFileSelected","event","target","files","length","i","file","reader","FileReader","onload","push","result","readAsDataURL","onBgClick","classList","contains","setCreateWindowStatus","addNewProduct","subscribe","data","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Satchel\\SatchelApp\\src\\app\\shared\\components\\create-window\\create-window.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\nimport { CreateService} from 'src/app/core/services/create.service';\r\nimport { ElementRef, ViewChild } from '@angular/core';\r\nimport { ProductType, Brand, ConfigService, ProductDto } from 'src/app/core/services/config.service';\r\nimport { ProductService } from 'src/app/core/services/product.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-create-window',\r\n  templateUrl: './create-window.component.html',\r\n  styleUrls: ['./create-window.component.css']\r\n})\r\n\r\nexport class CreateWindowComponent {\r\n\r\n  // массивы нужны для хранения списка фотографий продукта, брендов и типов продукта.\r\n  imageUrls = [this.configeService.PATHS.defaultProductImage];\r\n  productTypes : ProductType[] = [];\r\n  brandTypes : Brand[] = [];\r\n  sizeByProductTypes : any[] = []; // Временно :))))\r\n\r\n  @Input() newProduct: ProductDto = {  \r\n    name: '',\r\n    description: '',\r\n    productTypeId: 0,\r\n    price: 0,\r\n    brandTypeId: 0,\r\n    genderTypeId: 0,\r\n  }\r\n\r\n  constructor(private createService: CreateService,\r\n              private configeService: ConfigService,\r\n              private productService: ProductService) { }\r\n\r\n  @ViewChild('fileInput') fileInput = new ElementRef(null) ;\r\n\r\n  ngOnInit() {\r\n    this.getBrandTypes();\r\n    this.getProductTypes();   \r\n  }\r\n\r\n  onFileSelected(event: any) {\r\n    if (event.target.files && event.target.files.length) {\r\n      this.imageUrls = [] //обнулил предыдущие загруженные фотографии\r\n      for (let i = 0; i < event.target.files.length; i++) {\r\n        const file = event.target.files[i];\r\n        let reader = new FileReader();\r\n    \r\n        reader.onload = (event: any) => {\r\n          this.imageUrls.push(event.target.result);\r\n        }\r\n    \r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n  }\r\n\r\n  onBgClick(event: any) {\r\n    if (!event.target.classList.contains('create-form')) { \r\n      this.createService.setCreateWindowStatus()\r\n    } \r\n  }\r\n\r\n  addNewProduct() : void {\r\n    this.productService.addNewProduct(this.newProduct, this.imageUrls)//.subscribe\r\n    //   (data => {\r\n    //     console.log(data);\r\n    //   }, error => {\r\n    //     console.error(error);\r\n    //   });\r\n    }\r\n\r\n  getBrandTypes() {\r\n    this.createService.getBrandTypes().subscribe(\r\n      (data: any) => {\r\n        this.brandTypes = data;\r\n        console.log(data)\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching products', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getProductTypes() {\r\n    this.createService.getProductTypes().subscribe(\r\n      (data: any) => {\r\n        this.productTypes = data;\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching products', error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}