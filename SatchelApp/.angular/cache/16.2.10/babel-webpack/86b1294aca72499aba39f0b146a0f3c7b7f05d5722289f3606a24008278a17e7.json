{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AuthWindowComponent = class AuthWindowComponent {\n  ngOnInit() {\n    this.registrationService.stepChange.subscribe(() => {\n      this.updateStep();\n    });\n  }\n  constructor(registrationService, userService) {\n    this.registrationService = registrationService;\n    this.userService = userService;\n    this.step$ = this.registrationService.step;\n    this.email = '';\n    this.password = '';\n    this.userTypeId = false; // убарть\n    this.isLoginVisible = true;\n    this.isSwitchVisible = false;\n    this.isChecked = false;\n  }\n  updateStep() {\n    this.step$ = this.registrationService.step;\n    this.isLoginVisible = false;\n    this.isSwitchVisible = true;\n  }\n  handleUserLogin() {\n    if (this.email && this.password) {\n      this.registrationService.sendLoginRequestToBackend(this.email, this.password).subscribe(user => {\n        console.log(user); // поменять обработку тут и в error\n        this.userService.setAuthorizedStatus();\n      }, error => {\n        console.log(error);\n      });\n    } // можно дописать логику для else, чтобы выдать валидацию \n  }\n\n  handleUserRegistration() {\n    this.registrationService.goToRegistration();\n    if (this.email && this.password && this.userTypeId) {\n      this.registrationService.sendRegistrationRequestToBackend(this.email, this.password, this.userTypeId).subscribe(user => {\n        console.log(user);\n        this.userService.setAuthorizedStatus();\n      }, error => {\n        console.log(error);\n      });\n    } // можно дописать логику для else, чтобы выдать валидацию \n  }\n\n  onBgClick(event) {\n    if (!event.target.classList.contains('registration-form')) {\n      this.closeAuthWindow();\n    }\n  }\n  closeAuthWindow() {\n    this.registrationService.closeAuthWindow();\n  }\n  onEmailChange(event) {\n    this.email = event.target.value;\n  }\n  onPasswordChange(event) {\n    this.password = event.target.value;\n  }\n};\nAuthWindowComponent = __decorate([Component({\n  selector: 'app-auth-window',\n  templateUrl: './auth-window.component.html',\n  styleUrls: ['./auth-window.component.css']\n})], AuthWindowComponent);","map":{"version":3,"names":["Component","AuthWindowComponent","ngOnInit","registrationService","stepChange","subscribe","updateStep","constructor","userService","step$","step","email","password","userTypeId","isLoginVisible","isSwitchVisible","isChecked","handleUserLogin","sendLoginRequestToBackend","user","console","log","setAuthorizedStatus","error","handleUserRegistration","goToRegistration","sendRegistrationRequestToBackend","onBgClick","event","target","classList","contains","closeAuthWindow","onEmailChange","value","onPasswordChange","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Повелитель\\Documents\\GitHub\\Satchel\\SatchelApp\\src\\app\\shared\\components\\auth-window\\auth-window.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { AuthorizationService} from 'src/app/core/services/authorization.service';\r\nimport { UserService } from 'src/app/core/services/user.service';\r\nimport { IUserDto } from 'src/app/core/services/user.service';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-auth-window',\r\n  templateUrl: './auth-window.component.html',\r\n  styleUrls: ['./auth-window.component.css']\r\n})\r\nexport class AuthWindowComponent {\r\n\r\n  step$ = this.registrationService.step;\r\n\r\n  email: string = '';\r\n  password: string = '';\r\n  userTypeId: boolean = false; // убарть\r\n  isLoginVisible = true;\r\n  isSwitchVisible = false;\r\n  isChecked: boolean = false;\r\n\r\n  ngOnInit() {\r\n    this.registrationService.stepChange.subscribe(() => {\r\n      this.updateStep(); \r\n    });\r\n  }  \r\n\r\n  constructor(private registrationService: AuthorizationService, private userService: UserService) { }\r\n\r\n  updateStep() {\r\n    this.step$ = this.registrationService.step; \r\n    this.isLoginVisible = false;\r\n    this.isSwitchVisible = true;\r\n  }\r\n\r\n  handleUserLogin(): void {\r\n    if (this.email && this.password) {\r\n      this.registrationService.sendLoginRequestToBackend(this.email, this.password).subscribe(\r\n        (user: IUserDto) => {\r\n          console.log(user); // поменять обработку тут и в error\r\n          this.userService.setAuthorizedStatus()\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } // можно дописать логику для else, чтобы выдать валидацию \r\n  }\r\n  \r\n  handleUserRegistration() : void {\r\n    this.registrationService.goToRegistration();\r\n\r\n    if (this.email && this.password && this.userTypeId)\r\n    {\r\n      this.registrationService.sendRegistrationRequestToBackend(this.email, this.password, this.userTypeId).subscribe(\r\n        (user: IUserDto) => {\r\n          console.log(user);\r\n          this.userService.setAuthorizedStatus()\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }// можно дописать логику для else, чтобы выдать валидацию \r\n  }\r\n\r\n  public onBgClick(event: any) {\r\n    if (!event.target.classList.contains('registration-form')) { \r\n      this.closeAuthWindow();\r\n    } \r\n  }\r\n\r\n  closeAuthWindow(): void {\r\n      this.registrationService.closeAuthWindow();\r\n   }\r\n\r\n  onEmailChange(event: any): void {\r\n    this.email = event.target.value;\r\n  }\r\n\r\n  onPasswordChange(event: any): void {\r\n    this.password = event.target.value;\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAWlC,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAW9BC,QAAQA,CAAA;IACN,IAAI,CAACC,mBAAmB,CAACC,UAAU,CAACC,SAAS,CAAC,MAAK;MACjD,IAAI,CAACC,UAAU,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAC,YAAoBJ,mBAAyC,EAAUK,WAAwB;IAA3E,KAAAL,mBAAmB,GAAnBA,mBAAmB;IAAgC,KAAAK,WAAW,GAAXA,WAAW;IAflF,KAAAC,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACO,IAAI;IAErC,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,UAAU,GAAY,KAAK,CAAC,CAAC;IAC7B,KAAAC,cAAc,GAAG,IAAI;IACrB,KAAAC,eAAe,GAAG,KAAK;IACvB,KAAAC,SAAS,GAAY,KAAK;EAQyE;EAEnGV,UAAUA,CAAA;IACR,IAAI,CAACG,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACO,IAAI;IAC1C,IAAI,CAACI,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACC,eAAe,GAAG,IAAI;EAC7B;EAEAE,eAAeA,CAAA;IACb,IAAI,IAAI,CAACN,KAAK,IAAI,IAAI,CAACC,QAAQ,EAAE;MAC/B,IAAI,CAACT,mBAAmB,CAACe,yBAAyB,CAAC,IAAI,CAACP,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACP,SAAS,CACpFc,IAAc,IAAI;QACjBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;QACnB,IAAI,CAACX,WAAW,CAACc,mBAAmB,EAAE;MACxC,CAAC,EACDC,KAAK,IAAG;QACNH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;MACpB,CAAC,CACF;KACF,CAAC;EACJ;;EAEAC,sBAAsBA,CAAA;IACpB,IAAI,CAACrB,mBAAmB,CAACsB,gBAAgB,EAAE;IAE3C,IAAI,IAAI,CAACd,KAAK,IAAI,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACC,UAAU,EAClD;MACE,IAAI,CAACV,mBAAmB,CAACuB,gCAAgC,CAAC,IAAI,CAACf,KAAK,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,UAAU,CAAC,CAACR,SAAS,CAC5Gc,IAAc,IAAI;QACjBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;QACjB,IAAI,CAACX,WAAW,CAACc,mBAAmB,EAAE;MACxC,CAAC,EACDC,KAAK,IAAG;QACNH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;MACpB,CAAC,CACF;KACF;EACH;;EAEOI,SAASA,CAACC,KAAU;IACzB,IAAI,CAACA,KAAK,CAACC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC,mBAAmB,CAAC,EAAE;MACzD,IAAI,CAACC,eAAe,EAAE;;EAE1B;EAEAA,eAAeA,CAAA;IACX,IAAI,CAAC7B,mBAAmB,CAAC6B,eAAe,EAAE;EAC7C;EAEDC,aAAaA,CAACL,KAAU;IACtB,IAAI,CAACjB,KAAK,GAAGiB,KAAK,CAACC,MAAM,CAACK,KAAK;EACjC;EAEAC,gBAAgBA,CAACP,KAAU;IACzB,IAAI,CAAChB,QAAQ,GAAGgB,KAAK,CAACC,MAAM,CAACK,KAAK;EACpC;CACD;AAzEYjC,mBAAmB,GAAAmC,UAAA,EAL/BpC,SAAS,CAAC;EACTqC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWtC,mBAAmB,CAyE/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}